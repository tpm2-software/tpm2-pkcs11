#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

#WARNING: If your system hangs on this test, then the reason is typically that
#you are running clang on a fedora-30 or similar system that has a buggy combination
#of p11-tool p11-kit and libasan (clang). Consider using gcc or exporting
#ASAN_ENABLED=false

if [ "${DOCKER_TAG:-nodocker}" = "fedora-30" ]; then
  echo "p11-tool on fedora with libasan/clang is dysfunctional"
  ASAN_ENABLED=false
  #Even without ASAN the dlopen does not work on p11-tool/p11-kit at this moment
fi

set -x

source "$T/test/integration/scripts/helpers.sh"

tempdir=$(mktemp -d)

function cleanup() {
	rm -rf "$tempdir"
}
trap cleanup EXIT

onerror() {
  echo "$BASH_COMMAND on line ${BASH_LINENO[0]} failed: $?"
  exit 1
}
trap onerror ERR

setup_asan

if [ -z "$modpath" ]; then
  modpath="$PWD/src/.libs/libtpm2_pkcs11.so"
fi

function setup_spy() {
    export PKCS11SPY="$modpath"
    export PKCS11SPY_OUTPUT=${0}_pkcs11spy.log
    modpath=${PKCS11SPY_LIB:-/usr/lib/x86_64-linux-gnu/pkcs11-spy.so}
}

if [ "${USE_PKCS11SPY:-no}" != "no" ]; then
    setup_spy
fi

echo "modpath=$modpath"

function p11_tool() {
    p11tool -d 9999 $@
}

export HOME=${tempdir}
mkdir -p $HOME/.config/pkcs11/modules
echo "module: $modpath" >$HOME/.config/pkcs11/modules/tpm2-pkcs11.module

export TPM2_PKCS11_STORE="$tempdir"

echo "TPM2_PKCS11_STORE=$TPM2_PKCS11_STORE"

echo "testdata">${tempdir}/data

echo "Test p11-kit for modules"
p11-kit list-modules || true
echo "Done"

echo "Should have uninitialized token"
p11tool --list-tokens
if ! p11_tool --list-tokens | grep -q "Model: SW   TPM"; then
  echo "p11tool did not find this token."
  echo "If you are running a recent version of p11tool then you need to configure the module system-wide:"
  echo "echo \"module: $TRAVIS_BUILD_DIR/build/src/.libs/libtpm2_pkcs11.so\" >/etc/pkcs11/modules/tpm2_pkcs11.module"

  if [ "${DOCKER_TAG:-nodocker}" = "fedora-30" ]; then
    echo "p11-tool on fedora with clang is dysfunctional even without asan"
    exit 77 #TEST SKIP
  else
    exit 99 #TEST ERROR
  fi
fi
echo "Found uninitialized token"

echo "Getting token url"
p11_tool --list-token-urls
TOKENURL=$(p11_tool --list-token-urls | grep "SW%20%20%20TPM")
echo "Got token url: ${TOKENURL}"

echo "Testing mech and random function"
p11_tool --list-mechanisms ${TOKENURL}
test "$(p11tool -d 0 --generate-random=4096 ${TOKENURL} \
            | wc -c)" == "4096"
echo "Random function works"

echo "Testing p11tool version >= 3.5.0"
#Older version of p11tool segfault during --initialize
if [ "$(p11_tool --version=v | cut -d " " -f 2 | cut -d "." -f 1)" -lt "3" ]; then
  echo "p11tool version < 3.5.0, skipping"
  exit 77 #TEST SKIP
fi
if [ "$(p11_tool --version=v | cut -d " " -f 2 | cut -d "." -f 1)" -eq "3" ]; then
  if [ "$(p11_tool --version=v | cut -d " " -f 2 | cut -d "." -f 2)" -lt "5" ]; then
    echo "p11tool version < 3.5.0, skipping"
    exit 77 #TEST SKIP
  fi
fi
echo "p11tool version >= 3.5.0"

echo "Initializing token"
GNUTLS_SO_PIN=mynewsopin \
p11_tool --initialize --label=mynewtoken ${TOKENURL}
p11_tool --list-token-urls
TOKENURL=$(p11_tool --list-token-urls | grep "mynewtoken")
echo "Token initialized"

echo "Initializing user pin"
GNUTLS_SO_PIN=mynewsopin \
GNUTLS_PIN=mynewuserpin \
p11_tool --initialize-pin ${TOKENURL}
echo "Userpin initialized"

echo "Initializing token2"
GNUTLS_SO_PIN=mynewsopin \
p11_tool --initialize --label=mynewtoken2 $(p11_tool --list-token-urls | grep "SW%20%20%20TPM" | tail -n 1)
TOKENURL2=$(p11_tool --list-token-urls | grep "mynewtoken2")
echo "Token2 initialized"

echo "Initializing user pin2"
GNUTLS_SO_PIN=mynewsopin \
GNUTLS_PIN=mynewuserpin \
p11_tool --initialize-pin ${TOKENURL2}
echo "Userpin2 initialized"

echo "Generating RSA keypair"
GNUTLS_PIN=mynewuserpin \
p11_tool --generate-rsa --bits 2048 --login --label="myrsakey" --outfile="${tempdir}/pubkey.pem" ${TOKENURL}
GNUTLS_PIN=mynewuserpin \
p11_tool --login --list-all ${TOKENURL}
echo "RSA Keypair generated"

echo "Generating RSA keypair2"
GNUTLS_PIN=mynewuserpin \
p11_tool --generate-rsa --bits 2048 --login --label="my2rsakey" --outfile="${tempdir}/pubkey2.pem" ${TOKENURL2}
GNUTLS_PIN=mynewuserpin \
p11_tool --login --list-all ${TOKENURL2}
echo "RSA Keypair2 generated"

echo "Change the keypair label"
GNUTLS_PIN=mynewuserpin \
p11_tool --login --set-label="myrsakey2" "${TOKENURL};object=myrsakey;object-type=private"
GNUTLS_PIN=mynewuserpin \
p11_tool --login --list-all ${TOKENURL}
GNUTLS_PIN=mynewuserpin \
p11_tool --login --set-label="myrsakey" "${TOKENURL};object=myrsakey2;object-type=private"
echo "RSA Keypair generated"

echo "Testing signing via openssl"
osslconf="$tempdir/ossl.cnf"
cat << EOF > "$osslconf"
openssl_conf = openssl_init

[openssl_init]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
MODULE_PATH = $modpath
init = 0
EOF
export OPENSSL_CONF="$osslconf"

openssl dgst -engine pkcs11 -keyform engine \
        -sha256 -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:-1 \
        -sign "$TOKENURL" -out ${tempdir}/sig -passin pass:mynewuserpin ${tempdir}/data

openssl pkeyutl -sign -engine pkcs11 -keyform engine \
        -inkey ${TOKENURL} -passin pass:mynewuserpin \
        -in ${tempdir}/data -out ${tempdir}/sig
echo "Signing tested"

exit 0
