#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

set -xe

if [ -z "$T" ]; then
    export T="$(cd "$(dirname -- "${BASH_SOURCE[0]}")/../.." && pwd)"
fi

source "$T/test/integration/scripts/helpers.sh"

check_openssl_version

export TPM2OPENSSL_TCTI="$TPM2TOOLS_TCTI"

tempdir=$(mktemp -d)

function cleanup() {
	rm -rf "$tempdir"
}
trap cleanup EXIT

onerror() {
  echo "$BASH_COMMAND on line ${BASH_LINENO[0]} failed: $?"
  exit 1
}
trap onerror ERR

setup_asan

if [ -z "$modpath" ]; then
  modpath="$PWD/src/.libs/libtpm2_pkcs11.so"
fi

echo "modpath=$modpath"

pkcs11_tool() {
  pkcs11-tool --module "$modpath" "$@"
  return $?
}

tpm2tss_genkey() {
  export OPENSSL_CONF="$TEST_FIXTURES/tss2engine.cnf"
  export TPM2TSSENGINE_TCTI="$TPM2_PKCS11_TCTI"

  # Generate a TSS2 Engine RSA key
  tpm2tss-genkey "$@"

  unset OPENSSL_CONF
  unset OPENSSL_ENGINES
}

rsa_verify() {

  echo "testdata">${tempdir}/data

  echo "Testing RSA signature"
  pkcs11_tool -v --list-objects --login --pin myuserpin

  pkcs11_tool -v --sign --login --token-label="$1" --label="$2" --pin myuserpin \
            --input-file ${tempdir}/data --output-file ${tempdir}/sig \
            --mechanism SHA256-RSA-PKCS

  pkcs11_tool -v --read-object --token-label="$1" --label="$2" \
            --type pubkey --output-file "${tempdir}/$2.der" \
    || exit 77
  #This fails on old pkcs11-tool versions, thus exit-skip here

  openssl dgst -verify "${tempdir}/$2.der" -keyform DER -signature ${tempdir}/sig -sha256 \
             -sigopt rsa_padding_mode:pkcs1 \
             ${tempdir}/data
  echo "RSA signature tested"
}

export TPM2_PKCS11_STORE="$tempdir"

echo "TPM2_PKCS11_STORE=$TPM2_PKCS11_STORE"

echo "TPM2_PKCS11_TCTI=$TPM2_PKCS11_TCTI"
export TPM2_PKCS11_TCTI

# Create a primary key at "$handle"
tpm2_createprimary -c primary.ctx
handle=$(tpm2_evictcontrol -c primary.ctx | grep persistent-handle | cut -d' ' -f2-2)

# Create a primary object in the store referencing it
pid=$(tpm2_ptool init --primary-handle="$handle" --path=$TPM2_PKCS11_STORE | grep id | cut -d' ' -f2-2)

# Create a token using that pid
tpm2_ptool addtoken --pid="$pid" --label=linktoken --sopin=mysopin --userpin=myuserpin \
    --path=$TPM2_PKCS11_STORE

if [ "$OSSL3_DETECTED" -eq "0" ]; then
  # Set up the engine for the tpm2tss-genkey tool both for future and older ways of doing it
  engdir="$(pkg-config --variable=enginesdir libcrypto)"
  if [ -z "$engdir" ]; then
    export OPENSSL_ENGINES=/usr/local/lib/engines
  fi
  tpm2tss_genkey -P"$handle" -a rsa -s 2048 "$tempdir/tss2-rsa-2048.pem"
else
  openssl genpkey -provider tpm2 -algorithm RSA -pkeyopt "parent:$handle" -pkeyopt bits:2048 -out "$tempdir/tss2-rsa-2048.pem"
fi

# Link that key into the token
tpm2_ptool link --label=linktoken --userpin=myuserpin --key-label=tss2rsa2048 \
    --path=$TPM2_PKCS11_STORE "$tempdir/tss2-rsa-2048.pem"

rsa_verify "linktoken" "tss2rsa2048"

#
# Test transient primary keys that the TSS Engine uses
#
pid=$(tpm2_ptool init --transient-parent="tss2-engine-key" --path=$TPM2_PKCS11_STORE | grep id | cut -d' ' -f2-2)

tpm2_ptool addtoken --pid="$pid" --label=linktokentransient --sopin=mysopin --userpin=myuserpin \
    --path=$TPM2_PKCS11_STORE

if [ "$OSSL3_DETECTED" -eq "0" ]; then
  tpm2tss_genkey "$tempdir/tss2-rsa-2048-transient.pem"
else
  openssl genpkey -provider tpm2 -algorithm RSA -pkeyopt bits:2048 -out "$tempdir/tss2-rsa-2048-transient.pem"
fi

# Link that key into the token
tpm2_ptool link --label=linktokentransient --userpin=myuserpin --key-label=tss2rsa2048transient \
    --path=$TPM2_PKCS11_STORE "$tempdir/tss2-rsa-2048-transient.pem"

rsa_verify "linktokentransient" "tss2rsa2048transient"

# Now test with owner auth and primary object passwords set to something
rm -rf "$tempdir"/*

tpm2_changeauth -c o "newpass"

pid=$(tpm2_ptool init --transient-parent="tss2-engine-key" --hierarchy-auth=newpass --primary-auth=1234 \
    --path=$TPM2_PKCS11_STORE | grep id | cut -d' ' -f2-2)

tpm2_ptool addtoken --hierarchy-auth=newpass --pid="$pid" --label=linktokentransient --sopin=mysopin --userpin=myuserpin \
    --path=$TPM2_PKCS11_STORE

if [ "$OSSL3_DETECTED" -eq "0" ]; then
  tpm2tss_genkey -o newpass "$tempdir/tss2-rsa-2048-transient.pem"
else
  openssl genpkey -provider tpm2 -algorithm RSA -pkeyopt "parent-auth:newpass" -pkeyopt bits:2048 -out "$tempdir/tss2-rsa-2048-transient.pem"
fi

# Link that key into the token
tpm2_ptool link --hierarchy-auth=newpass --label=linktokentransient --userpin=myuserpin --key-label=tss2rsa2048transient \
    --path=$TPM2_PKCS11_STORE "$tempdir/tss2-rsa-2048-transient.pem"

export TPM2_PKCS11_OWNER_AUTH=newpass
rsa_verify "linktokentransient" "tss2rsa2048transient"

# Drop the ownerauth password
tpm2_changeauth -c o -p "newpass"
unset TPM2_PKCS11_OWNER_AUTH

#
# Test transient primary keys that the tpm2-tools tpm2_createprimary produces
#

# Create a key under the default primary key for the tools
tpm2_createprimary -c "$tempdir/primary.ctx"
tpm2_create -C "$tempdir/primary.ctx" -u "$tempdir/key.pub" -r "$tempdir/key.priv"

# Create a token suitable to use this key
pid=$(tpm2_ptool init --transient-parent="tpm2-tools-default" --path=$TPM2_PKCS11_STORE | grep id | cut -d' ' -f2-2)

tpm2_ptool addtoken --pid="$pid" --label=linktokentpmtoolsdefault --sopin=mysopin --userpin=myuserpin \
    --path=$TPM2_PKCS11_STORE

# Link that key into the token
tpm2_ptool link --label=linktokentpmtoolsdefault --userpin=myuserpin --key-label=tpm2toolkey \
    --path=$TPM2_PKCS11_STORE "$tempdir/key.pub" "$tempdir/key.priv"

rsa_verify "linktokentpmtoolsdefault" "tpm2toolkey"

# Create an ECC key just to make sure that works too
tpm2_create -C "$tempdir/primary.ctx" -Gecc -u "$tempdir/key-ecc.pub" -r "$tempdir/key-ecc.priv"

# Also swap public and private to make sure order doesn't matter
tpm2_ptool link --label=linktokentpmtoolsdefault --userpin=myuserpin --id=12345678 --key-label=tpm2toolecckey \
    --path=$TPM2_PKCS11_STORE "$tempdir/key-ecc.priv" "$tempdir/key-ecc.pub"

# Perform a signature using ECDSA w/SHA1
# Note: you must hex encode the id for it to work
pkcs11_tool --token-label=linktokentpmtoolsdefault --login --pin myuserpin --sign --id=3132333435363738 \
            --input-file ${tempdir}/data --mechanism ECDSA-SHA1 \
            --signature-format=openssl --output-file ${tempdir}/sig

# Verify signature against public key in PEM format, so load it and get a PEM format
tpm2_load -C "$tempdir/primary.ctx" -u "$tempdir/key-ecc.pub" -r "$tempdir/key-ecc.priv" \
    -c "$tempdir/ecc-key.ctx"

tpm2_readpublic -c "$tempdir/ecc-key.ctx" -f pem -o "$tempdir/ecc-key.pem"

openssl dgst -sha1 -verify "$tempdir/ecc-key.pem" -signature "$tempdir/sig" "$tempdir/data"

#
# Test tpm2_createprimary -Gecc transient primary keys
#

# Create a key under the default primary key for the tools
tpm2_createprimary -Gecc -c "$tempdir/primary.ctx"
tpm2_create -C "$tempdir/primary.ctx" -u "$tempdir/key.pub" -r "$tempdir/key.priv"

# Create a token suitable to use this key
pid=$(tpm2_ptool init --transient-parent="tpm2-tools-ecc-default" --path=$TPM2_PKCS11_STORE | grep id | cut -d' ' -f2-2)

tpm2_ptool addtoken --pid="$pid" --label=eccdefault --sopin=mysopin --userpin=myuserpin \
    --path=$TPM2_PKCS11_STORE

# Link that key into the token
tpm2_ptool link --label=eccdefault --userpin=myuserpin --key-label=tpm2toolkey \
    --path=$TPM2_PKCS11_STORE "$tempdir/key.pub" "$tempdir/key.priv"

rsa_verify "eccdefault" "tpm2toolkey"

# Create an ECC key just to make sure that works too
tpm2_create -C "$tempdir/primary.ctx" -Gecc -u "$tempdir/key-ecc.pub" -r "$tempdir/key-ecc.priv"

# Also swap public and private to make sure order doesn't matter
tpm2_ptool link --label=eccdefault --userpin=myuserpin --id=12345678 --key-label=tpm2toolecckey \
    --path=$TPM2_PKCS11_STORE "$tempdir/key-ecc.priv" "$tempdir/key-ecc.pub"

# Perform a signature using ECDSA w/SHA1
# Note: you must hex encode the id for it to work
pkcs11_tool --token-label=eccdefault --login --pin myuserpin --sign --id=3132333435363738 \
            --input-file ${tempdir}/data --mechanism ECDSA-SHA1 \
            --signature-format=openssl --output-file ${tempdir}/sig

# Verify signature against public key in PEM format, so load it and get a PEM format
tpm2_load -C "$tempdir/primary.ctx" -u "$tempdir/key-ecc.pub" -r "$tempdir/key-ecc.priv" \
    -c "$tempdir/ecc-key.ctx"

tpm2_readpublic -c "$tempdir/ecc-key.ctx" -f pem -o "$tempdir/ecc-key.pem"

openssl dgst -sha1 -verify "$tempdir/ecc-key.pem" -signature "$tempdir/sig" "$tempdir/data"

# Add an HMAC SHA1 key and test it. We use SHA1 do to limited support in pkcs11-tool not supporting SHA256+
tpm2_create -C "$tempdir/primary.ctx" -Ghmac:sha1 -u "$tempdir/key-hmac.pub" -r "$tempdir/key-hmac.priv"

tpm2_ptool link --label=eccdefault --userpin=myuserpin --id=987654321 --key-label=tpm2toolhmackey \
    --path=$TPM2_PKCS11_STORE "$tempdir/key-ecc.priv" "$tempdir/key-ecc.pub"


# Well, pkcs11-tool is broken, it requires all sign operations to be conducted with a CKO_PRIVATE_KEY and HMAC keys
# are CKO_SECRET_KEY.
# tpm2_pkcs11-tool --token-label=label --login --pin=myuserpin --sign --id='393837363534333231' --input-file=data.msg \
# -mechanism=SHA-1-HMAC --output-file=data.sig

exit 0
