#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

set -eo pipefail

if [ -z "$T" ]; then
    export T="$(cd "$(dirname -- "${BASH_SOURCE[0]}")/../.." && pwd)"
fi

source "$T/test/integration/scripts/helpers.sh"

tempdir=$(mktemp -d)

function cleanup() {
	rm -rf "$tempdir"
}
trap cleanup EXIT

onerror() {
  echo "$BASH_COMMAND on line ${BASH_LINENO[0]} failed: $?"
  exit 1
}
trap onerror ERR

#
# Before we setup and possibly LD_PRELOAD the asan library,
# we need to download and build v1.0 and test HEAD (current build)
# against it in the tempdir.
#
pushd "$tempdir"

oldver=1.0.3
if ! wget "$PACKAGE_URL/releases/download/$oldver/tpm2-pkcs11-$oldver.tar.gz"; then
    echo "Could not download old version tpm2-pkcs11-$oldver.tar.gz"
    exit 77
fi
if ! sha256sum "tpm2-pkcs11-$oldver.tar.gz" | grep -q ^6542049c0cc217b4372da52ea207fcb22e15afb2e76b9dc2f3d126b3147780c7; then
    echo "Integrity check of tpm2-pkcs11-$oldver.tar.gz failed"
    exit 99
fi
tar xzf "tpm2-pkcs11-$oldver.tar.gz"

pushd "tpm2-pkcs11-$oldver"
./configure --enable-debug --disable-hardening
make -j$(nproc)
popd
popd

echo "PWD: $(pwd)"

# modpath will be to the HEAD version library
if [ -z "$modpath" ]; then
  modpath="$(pwd)/src/.libs/libtpm2_pkcs11.so"
fi

echo "modpath=$modpath"

setup_asan

pkcs11_tool() {
  pkcs11-tool --module "$modpath" "$@"
  return $?
}

export TPM2_PKCS11_STORE="$tempdir"

echo "TPM2_PKCS11_STORE=$TPM2_PKCS11_STORE"

#
# Since OLD is on 1.0, it won't automagically populate a store.
# So we need to use the 1.0 tpm2_ptool
# XXX should we prepend the current?
#
PYTHONPATH=$tempdir/tpm2-pkcs11-$oldver/tools
echo $PYTHONPATH

tpm2_ptool init
tpm2_ptool addtoken --pid=1 --sopin=mysopin --userpin=myuserpin --label=label

# at this point we can verify the db schema version
echo "Checking schema version as 1"
v=$(sqlite3 "$TPM2_PKCS11_STORE/tpm2_pkcs11.sqlite3" 'select schema_version from schema;')
echo "Got schema version as $v"
test 1 -eq $v

# do an upgrade
echo "Generating RSA key pair"
pkcs11_tool --slot=1 --label="myrsakey" --login --pin=myuserpin --keypairgen
echo "RSA Key pair generated"

echo "Checking schema version as > 1"
v=$(sqlite3 "$TPM2_PKCS11_STORE/tpm2_pkcs11.sqlite3" 'select schema_version from schema;')
echo "Got schema version as $v"
test $v -ge 1

echo "testdata">${tempdir}/data

echo "Using key to ensure it still wotks"
pkcs11_tool -v --sign --login --slot-index=0 --label="myrsakey" --pin myuserpin \
            --input-file ${tempdir}/data --output-file ${tempdir}/sig \
            --mechanism SHA256-RSA-PKCS
echo "Successfully used key post schema upgrade"

exit 0
