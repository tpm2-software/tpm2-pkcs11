#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

set -x

source "$T/test/integration/scripts/helpers.sh"

tempdir=$(mktemp -d)

function cleanup() {
	rm -rf "$tempdir"
}
trap cleanup EXIT

onerror() {
  echo "$BASH_COMMAND on line ${BASH_LINENO[0]} failed: $?"
  exit 1
}
trap onerror ERR

setup_asan

if [ -z "$modpath" ]; then
  modpath="$PWD/src/.libs/libtpm2_pkcs11.so"
fi

echo "modpath=$modpath"

pkcs11_tool() {
  pkcs11-tool --module "$modpath" "$@"
  return $?
}

export TPM2_PKCS11_STORE="$tempdir"

echo "TPM2_PKCS11_STORE=$TPM2_PKCS11_STORE"

echo "testdata">${tempdir}/data

echo "Should have uninitialized token"
pkcs11_tool -T | grep -q uninitialized
echo "Found uninitialized token"

pkcs11_tool -I
pkcs11_tool -T

echo "Initializing token"
pkcs11_tool --slot-index=0 --init-token --label=mynewtoken --so-pin=mynewsopin
echo "Token initialized"

pkcs11_tool -T

echo "Initializing user pin"
pkcs11_tool --slot-index=0 --login --login-type="so" --init-pin --so-pin=mynewsopin --pin=mynewuserpin
echo "Userpin initialized"

echo "Generating RSA key pair"
pkcs11_tool --slot-index=0 --label="myrsakey" --login --pin=mynewuserpin --keypairgen
echo "RSA Key pair generated"

echo "Testing RSA signature"
pkcs11_tool -v --list-objects --login --pin mynewuserpin

pkcs11_tool -v --sign --login --slot-index=0 --label="myrsakey" --pin mynewuserpin \
            --input-file ${tempdir}/data --output-file ${tempdir}/sig \
            --mechanism SHA256-RSA-PKCS

pkcs11_tool -v --read-object --slot-index=0 --label="myrsakey" \
            --type pubkey --output-file ${tempdir}/pubkey.der \
    || exit 77
#This fails on old pkcs11-tool versions, thus exit-skip here

openssl dgst -verify ${tempdir}/pubkey.der -keyform DER -signature ${tempdir}/sig -sha256 \
             -sigopt rsa_padding_mode:pkcs1 \
             ${tempdir}/data
echo "RSA signature tested"

echo "Change PIN test"
pkcs11_tool --change-pin --slot-index=0 --pin=mynewuserpin --login --new-pin=temppin
pkcs11_tool --change-pin --slot-index=0 --pin=temppin --login --new-pin=mynewuserpin
echo "PIN change tested"

#
# Regression test for https://github.com/tpm2-software/tpm2-pkcs11/issues/399
# Delete Private Key then Public Key.
pkcs11_tool --delete-object --slot-index=0 --label="myrsakey" --pin=mynewuserpin --login --type=privkey
pkcs11_tool --list-objects --slot-index=0

pkcs11_tool --delete-object --slot-index=0 --label="myrsakey" --pin=mynewuserpin --login --type=pubkey
pkcs11_tool --list-objects --slot-index=0

#
# Test creating data objects
#
echo "hello world" > objdata
pkcs11_tool --slot-index=0 --login --pin=mynewuserpin --write-object objdata --type data --label dataobj1 --private

# whitebox test to make sure secret is not in store
if [ "$TPM2_PKCS11_BACKEND" != "fapi" ]; then
  sqlite3 "$TPM2_PKCS11_STORE/tpm2_pkcs11.sqlite3" 'select attrs from tobjects;' | grep -qiv "$(cat objdata)"
  # and check for the hex encoded version too
  sqlite3 "$TPM2_PKCS11_STORE/tpm2_pkcs11.sqlite3" 'select attrs from tobjects;' | grep -qiv "$(xxd -p objdata)"
fi

pkcs11_tool --slot-index=0 --login --pin=mynewuserpin --read-object --type data --label dataobj1 -o objdata2
cmp objdata objdata2

exit 0
