#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

tempdir=$(mktemp -d)

function cleanup() {
	rm -rf "$tempdir"
}
trap cleanup EXIT

onerror() {
  echo "$BASH_COMMAND on line ${BASH_LINENO[0]} failed: $?"
  exit 1
}
trap onerror ERR

setup_asan()
{
    if [ "$ASAN_ENABLED" = "true" ]; then
        # To get line numbers set up the asan symbolizer
        clang_version=`$CC --version | head -n 1 | cut -d\  -f 3-3 | cut -d\. -f 1-3 | cut -d- -f 1-1`
        # Sometimes the version string has an Ubuntu on the front of it and the field
        # location changes
        if [ $clang_version == "version" ]; then
            clang_version=`$CC --version | head -n 1 | cut -d\  -f 4-4 | cut -d\. -f 1-3`
        fi
        echo "Detected clang version: $clang_version"
        minor_maj=`echo "$clang_version" | cut -d\. -f 1-2`
        export LD_PRELOAD=/usr/lib/llvm-$minor_maj/lib/clang/$clang_version/lib/linux/libclang_rt.asan-$(arch).so
        echo "export LD_PRELOAD=\"$LD_PRELOAD\""
        export ASAN_OPTIONS=detect_leaks=0
        echo "turning off asan detection for running commands..."
    fi
}

setup_asan

if [ -z "$modpath" ]; then
  modpath="$PWD/src/.libs/libtpm2_pkcs11.so"
fi

echo "modpath=$modpath"

pkcs11_tool() {
  pkcs11-tool --module "$modpath" "$@"
  return $?
}

export TPM2_PKCS11_STORE="$tempdir"

echo "TPM2_PKCS11_STORE=$TPM2_PKCS11_STORE"

echo "Should have unitialized token"
pkcs11_tool -T | grep -q uninitialized
echo "Found unitialized token"

echo "Initializing token"
pkcs11_tool --slot=1 --init-token --label=mynewtoken --so-pin=mynewsopin
echo "Token initialized"

echo "Initializing user pin"
pkcs11_tool --slot=1 --login --login-type="so" --init-pin --so-pin=mynewsopin --pin=mynewuserpin
echo "Userpin initialized"

echo "Generating RSA keypair"
pkcs11_tool --slot=1 --label="myrsakey" --login --pin=mynewuserpin --keypairgen
echo "RSA Keypair generated"

#
# Test creating data objects
#
echo "hello world" > objdata
pkcs11_tool --slot-index=0 --login --pin=mynewuserpin --write-object objdata --type data --label dataobj1 --private

# whitebox test to make sure secret is not in store
if [ "$TPM2_PKCS11_BACKEND" != "fapi" ]; then
  sqlite3 "$TPM2_PKCS11_STORE/tpm2_pkcs11.sqlite3" 'select attrs from tobjects;' | grep -qiv "$(cat objdata)"
  # and check for the hex encoded version too
  sqlite3 "$TPM2_PKCS11_STORE/tpm2_pkcs11.sqlite3" 'select attrs from tobjects;' | grep -qiv "$(xxd -p objdata)"
fi

pkcs11_tool --slot-index=0 --login --pin=mynewuserpin --read-object --type data --label dataobj1 -o objdata2
cmp objdata objdata2

exit 0
