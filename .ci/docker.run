#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

set -e

source $DOCKER_BUILD_DIR/.ci/docker-prelude.sh

# export ptool location
export PATH=$PATH:"$DOCKER_BUILD_DIR"/tools

# Do not run tests when building on coverity_scan branch
if [ "${COVERITY_SCAN_BRANCH}" == 1 ]; then
  echo "Coverity scan branch detected, not running build nor tests...exiting!"
  exit 0
fi

if [ "$ENABLE_FUZZING" == "true" ]; then
  echo "Enabling fuzz build"
  ./bootstrap
  ./configure --enable-fuzzing --enable-debug
  make -j4 check
  exit 0
fi

# If it's clang, enable asan
if [[ "$CC" == clang* ]]; then
  echo "Detecting clang, enable asan"
  config_flags="--enable-asan"
  export ASAN_ENABLED=true
  echo "Exported ASAN_ENABLED=$ASAN_ENABLED"
  # To get line numbers set up the asan symbolizer
  clang_version=`$CC --version | head -n 1 | cut -d\  -f 3-3 | cut -d\. -f 1-2`
  # Sometimes the version string has an Ubuntu on the front of it and the field
  # location changes
  if [ $clang_version == "version" ]; then
    clang_version=`$CC --version | head -n 1 | cut -d\  -f 4-4 | cut -d\. -f 1-2`
  fi
  echo "Detected clang version: $clang_version"
  ASAN_SYMBOLIZER_PATH="/usr/lib/llvm-$clang_version/bin/llvm-symbolizer"
  if [ -e "$ASAN_SYMBOLIZER_PATH" ]; then
    export ASAN_SYMBOLIZER_PATH
    echo "Exported ASAN_SYMBOLIZER_PATH=$ASAN_SYMBOLIZER_PATH"
  else
    echo "No llvm symbolizer found at: $ASAN_SYMBOLIZER_PATH"
    unset ASAN_SYMBOLIZER_PATH
  fi
  # clang, you fickle beast, under version 9 I know you don't like building in the CRT
  # for things like __builtin_mul (undefined references to __muloti4)
  major_ver=$(echo $clang_version | cut -d'.' -f 1-1)
  if [ "$major_ver" -lt 9 ]; then
    echo "Detecting clang less than version 9, enabling --enable-debug --disable-overflow"
    config_flags="$config_flags --enable-debug --disable-overflow"
    echo "config_flags: $config_flags"
  fi
else
  echo "Enabling Code Coverage"
  config_flags="--disable-hardening --enable-code-coverage"
fi

# Bootstrap the project
./bootstrap

# clang and gcc can have features enabled in the config_flags that
# avoid error checking or cause make distcheck to fail. So run a
# pure check with gcc before adding those flags.
if [[ "$CC" != clang* ]]; then
    ./configure --enable-esapi-session-manage-flags --disable-fapi --enable-unit --enable-integration
    make distcheck TESTS=
    make distclean
fi

# Make a build variant directory and change to it
mkdir ./build
pushd ./build

# Run scan-build for gcc only.
# Scan-build does not work with clang because of asan linking errors.
if [[ "$CC" != clang* ]]; then
    scan-build ../configure --enable-unit --enable-integration --enable-debug=yes $config_flags
    scan-build --status-bugs make -j$(nproc)

    # scan-build causes test_tpm2_session to fail, so
    # rebuild after running scan-build.
fi

../configure --enable-unit --enable-integration --enable-esapi-session-manage-flags --enable-fapi $config_flags
make -j$(nproc)
make -j check

if [[ "$ENABLE_COVERAGE" == "true" ]]; then
    bash <(curl -s https://codecov.io/bash)
fi

popd

exit 0
